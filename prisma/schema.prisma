generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId   Int      @id @default(autoincrement())
  id       String
  password String
  userType String
  point    Int
  createdAt DateTime @default(now())
  deletedAt DateTime? @db.Timestamp()

  // Orders 관계
  orders Orders[]

  // Restaurants 관계
  restaurants Restaurants[]

  @@map("Users")
}

model Restaurants {
  restaurantId Int      @id @default(autoincrement())
  brandName    String
  address      String
  tel          String
  type         String
  createdAt     DateTime @default(now())
  deletedAt     DateTime? @db.Timestamp()

  // Users 관계
  UserId Int
  Users  Users @relation(fields: [UserId], references: [userId],onDelete: Cascade)

  // Orders 관계
  orders Orders[]

  // Menus 관계
  menus Menus[]

  
  // 검색을 위한 인덱스 생성
  @@index([brandName], name: "brand_name")

  @@map("Restaurants")
}

model Orders {
  orderId    Int      @id @default(autoincrement())
  totalPrice Int
  status     String
  createdAt   DateTime @default(now())
  deletedAt   DateTime? @db.Timestamp()

  // Users 관계
  UserId Int
  users  Users @relation(fields: [UserId], references: [userId])

  // Restaurants 관계
  restaurantId Int
  restaurants  Restaurants @relation(fields: [restaurantId], references: [restaurantId])

  // Menus 관계
  menus Menus[]


  @@map("Orders")
}

model Menus {
  menuId   Int      @id @default(autoincrement())
  menuName String
  image    String
  price    Int
  createdAt DateTime @default(now())
  deletedAt DateTime? @db.Timestamp()

  // Orders 관계
  OrderId Int
  orders  Orders @relation(fields: [OrderId], references: [orderId])

  // Restaurants 관계 
  restaurantId Int
  restaurants  Restaurants @relation(fields: [restaurantId], references: [restaurantId],onDelete: Cascade)

  
  // 검색을 위한 인덱스 생성
  @@index([menuName], name: "menu_name")

  @@map("Menus")
}
